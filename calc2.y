%{
#include <iostream>
#include <string>    
#include <map>
#include <cstdlib>>

using namespace std;

map<string,int> vars;

int yylex();
int yyerror(const char *p) { std::cerr << "error: " << p << std::endl; };
%}

%union {
    int val;
    char* str_val;
};


%token LPAREN RPAREN PLUS MINUS MUL DIV INT EQUALS
%token <val> NUM
%token <str_val> VARIABLE

%type <val> expr
%type <val> commands
%type <val> assign

%start prog

/* Resolve the ambiguity of the grammar by defining precedence. */
/* Order of directives will determine the precedence. */
%left PLUS MINUS    /* left means left-associativity. */
%left DIV MUL

%%

prog : 
     | prog commands
     ;

commands : expr
         | declare
         | assign

expr : 
     | expr PLUS expr                   { $$ = $1 + $3; }
     | expr MINUS expr                  { $$ = $1 - $3; }
     | expr MUL expr                    { $$ = $1 * $3; }
     | expr DIV expr                    { $$ = $1 / $3; }
     | NUM                              /* default action: { $$ = $1; } */
     | LPAREN expr RPAREN               { $$ = $2; }
     ;


declare : 
       | INT VARIABLE                 { printf("variable declaration\n"); vars[$2] = 0; printf("%d", vars[$2]);}
       ;

assign :
       | VARIABLE EQUALS expr         { printf("variable assignment"); }
       ;


%%



int main()
{
    yyparse(); // A parsing function that will be generated by Bison.
    return 0;
}




















