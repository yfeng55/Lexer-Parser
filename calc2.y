%{
#include <iostream>
#include <string>    
#include <map>
#include <cstdlib>>

using namespace std;

map<string,int> vars;

int yylex();
int yyerror(const char *p) { std::cerr << "error: " << p << std::endl; };
%}

%union {
    int val;
    char* str_val;
};


%token LPAREN RPAREN PLUS MINUS MUL DIV INT EQUALS PRINT SEMICOLON
%token <val> NUM
%token <str_val> VARIABLE

%type <val> expr
%type <val> commands

%start prog

/* Resolve the ambiguity of the grammar by defining precedence. */
/* Order of directives will determine the precedence. */
%left PLUS MINUS    /* left means left-associativity. */
%left DIV MUL

%%

prog : commands
     | prog commands
     ;

commands : expr
         | declare
         | print
         ;

expr : expr PLUS expr                   { $$ = $1 + $3; }
     | expr MINUS expr                  { $$ = $1 - $3; }
     | expr MUL expr                    { $$ = $1 * $3; }
     | expr DIV expr                    { $$ = $1 / $3; }
     | NUM                              /* default action: { $$ = $1; } */
     | VARIABLE                         { if(vars.find($1) == vars.end()){
                                            yyerror("variable has not been declared yet -- terminating");
                                            exit(0);
                                          }else{
                                            $$ = vars[$1];
                                          }
                                        }
                                        
     | LPAREN expr RPAREN               { $$ = $2; }
     ;


declare : INT VARIABLE                 { printf("variable declaration\n"); 
                                                     if(vars.find($2) == vars.end()){
                                                        vars[$2] = 0; 
                                                        printf("%d", vars[$2]);
                                                     }else{
                                                        printf("WARNING: variable has already been assigned\n");
                                                     }
                                                   }

        | VARIABLE EQUALS expr        { printf("variable assignment\n"); 

                                                  if(vars.find($1) == vars.end()){
                                                    yyerror("variable has not been declared yet -- terminating");
                                                    exit(0);
                                                  }else{
                                                    vars[$1] = $3;
                                                  }
                                                  printf("%d", vars[$1]);
                                                }
        ;


print : PRINT VARIABLE                 {  printf("\n\n"); 
                                          printf($2);
                                          printf(" is %d \n\n", vars[$2]); }

%%



int main()
{
    yyparse(); // A parsing function that will be generated by Bison.
    return 0;
}




















